name: NestJS-Backend:CI

on:
  push:
    branches: ['feature/ci-cd-testing']  # Trigger this workflow when there is a push to the 'main' branch

jobs:
  build:
    name: 'Build Image'  # Name of the job, which will be displayed in the Actions tab
    runs-on: ubuntu-latest  # Run the job on the latest Ubuntu runner provided by GitHub

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # This action checks out your repository's code so that it can be used in the workflow

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS access key for authentication
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS secret key for authentication
          aws-region: eu-north-1  # AWS region where the ECR repository is located

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        # This action logs in to Amazon Elastic Container Registry (ECR) to allow pushing images

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # The ECR registry URL
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}  # The name of the ECR repository
          IMAGE_TAG: ${{ github.sha }}  # The Git commit SHA to tag the Docker image
        run: |
          # Build the Docker image and tag it with the commit SHA
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push the Docker image to the ECR repository
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Logout to Amazon ECR
        if: always()
        run: docker logout ${{steps.login-ecr.outputs.registry}}
        # This step logs out of Amazon ECR to clean up credentials. Runs regardless of previous steps' success or failure

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
          STAGE: production  # Set your stage environment variable
          PORT: 6969
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: 5432
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_TOKEN_AUDIENCE: ${{ secrets.CLIENT_URL }}
          JWT_TOKEN_ISSUER: ${{ secrets.CLIENT_URL }}
          JWT_ACCESS_TOKEN_TTL: 36000
          JWT_REFRESH_TOKEN_TTL: 86400
          NODE_ENV: production
        run: |
          heroku container:login
          heroku container:push web --app $HEROKU_APP_NAME
          heroku container:release web --app $HEROKU_APP_NAME
